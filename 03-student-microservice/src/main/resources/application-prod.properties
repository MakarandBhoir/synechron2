spring.application.name=student-microservice
server.port=8084
eureka.client.service-url.default-zone=http://localhost:8761/eureka

spring.datasource.url=jdbc:mysql://localhost:3306/studentdb
spring.datasource.username=root
spring.datasource.password=Makarand@12345
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.sql.init.mode=always
# read specific sql file for production environment
#spring.datasource.schema=schema.sql
spring.datasource.data=classpath:mysql/data.sql

#spring.jpa.hibernate.ddl-auto=update

# circuit breaker configuration
#  It allows Spring Boot to report the status of the circuit breaker through the health endpoint (/actuator/health).
resilience4j.circuitbreaker.instances.courseServiceCircuitBreaker.registerHealthIndicator=true

# This sets the failure rate threshold to 50%. If the failure rate of the courseServiceCircuitBreaker exceeds 50% over the configured sliding window, 
# the circuit breaker will transition to the open state (i.e., it will prevent further attempts).
resilience4j.circuitbreaker.instances.courseServiceCircuitBreaker.failureRateThreshold=50

# This defines the number of calls (or "events") to consider when calculating the failure rate. With a sliding window size of 10, 
# the failure rate is computed over the last 10 calls.
resilience4j.circuitbreaker.instances.courseServiceCircuitBreaker.slidingWindowSize=10

# This will remain in the open state for 1 minute before transitioning to the half-open state. 
# In your case, it will stay open for 1 minute before it allows a limited number of requests 
# to check if the service has recovered.
resilience4j.circuitbreaker.instances.courseServiceCircuitBreaker.waitDurationInOpenState=1m

# After 1 minute (as per above config) it will come to half-open state and call the dependent service for 5 time in the half-open state.
resilience4j.circuitbreaker.instances.courseServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=5


